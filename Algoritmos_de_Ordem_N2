#include <stdio.h>
#include <stdlib.h>
 
void fill_vet(int *vet, int size,int op){
    int i;
    switch(op){
        case 0:
            for(i=0;i<size;i++)
                vet[i]=size-i;
            break;
        default:
            scanf("%d",&vet[0]);
            for(i=1;i<size;i++){
                scanf(" %d",&vet[i]);
            }
            break;
    }
}
 
void print_vet(int *vet, int size){
    int i;
    printf("\n--------------------\n");
    for(i=0;i<size;i++)
        printf("%d ",vet[i]);
    printf("\n--------------------\n");
}
 
void copy_vet(int *vet1, int *vet2, int size){
    for(int i = 0 ;i<size;i++)
        vet2[i]=vet1[i];
}
 
void swap(int *vet, int i, int j){
    int aux = vet[i];
    vet[i]=vet[j];
    vet[j]=aux;
}
 
void selection_sort(int *vet, int size){
    int menor,i,j;
    int nc=0, nt=0;
    int *vetaux=(int *)malloc(size*sizeof(int));
    copy_vet(vet,vetaux,size);
    for(i=0;i<size-1;i++){
        menor=i;
        for(j=i+1;j<size;j++){
            nc++;
            if(vetaux[j]<vetaux[menor])
                menor = j;
        }
        if(menor!=i)
            nt++;
            swap(vetaux,menor,i);
    }
    printf("%d %d\n",nc,nt);
    free(vetaux);
}
 
void bubble_sort(int *vet, int size){
    int i=0,j=0;
    int nc=0,nt=0;
    int desordenado=0;
    int *vetaux=(int*)malloc(size*sizeof(int));
    copy_vet(vet,vetaux,size);
    
    for(i=0;i<size;i++){
        desordenado = 0;
        for(j=0;j<size-i-1;j++){
            nc++;
            if(vetaux[j]>vetaux[j+1]){
                desordenado = 1;
                nt++;
                swap(vetaux,j,j+1);
            }
        }
        if(!desordenado) break;
    }
 
 
    printf("%d %d\n",nc,nt);
    //print_vet(vetaux,size);
    free(vetaux);
}
 
void insertion_sort(int *vet, int size){
    int i,j,chave;
    int nc=0,nt=0;
    int *vetaux=(int*)malloc(size*sizeof(int));
    copy_vet(vet,vetaux,size);
 
    for(i=1;i<size;i++){    
        chave=vetaux[i];
        for(j=i-1;j>=0;j--){
            nc++;
            if(chave<vetaux[j]){
                vetaux[j+1]=vetaux[j];
                nt++;
            }else break;
        }
        if(vetaux[j+1]!=chave){
            nt++;
            vetaux[j+1]=chave;
        }
    }
    //print_vet(vetaux,size);
    printf("%d %d\n",nc,nt);
    free(vetaux);
}
 
int main(){
    int *vet;
    int SIZE;
 
    scanf("%d",&SIZE);
 
    vet =(int*)malloc(SIZE*sizeof(int));
 
    fill_vet(vet,SIZE,1);
    
    selection_sort(vet,SIZE);
    bubble_sort(vet,SIZE);
    insertion_sort(vet,SIZE);
 
    //print_vet(vet,SIZE);    
 
    free(vet);
    return 0;
}
